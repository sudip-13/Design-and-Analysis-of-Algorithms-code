1.Write a program to sort a given array using quick sort. Derive best case and average case time complexity of quick sort.
->
#include<stdio.h>
#include<stdlib.h>
int partition(int ar[],int low,int up){
    int i=low;
    int j=up;
    int pivot=ar[low];
    int temp;
    while(i<j){
        while(ar[i]<=pivot){
            i+=1;
        }
        while(ar[j]>pivot){
            j-=1;
        }
        if(i<j){
            temp=ar[i];
            ar[i]=ar[j];
            ar[j]=temp;
        }
    }
    temp=ar[low];
    ar[low]=ar[j];
    ar[j]=temp;
    return j;
}
void quick_sort(int ar[],int low,int up){
    int pos;
    if(low<up){
        pos=partition(ar,low,up);
        quick_sort(ar,low,pos-1);
        quick_sort(ar,pos+1,up);
        
    }
}
int main()
{
    int size,ar[100],i;
    printf("Enter size of the array");
    scanf("%d",&size);
    printf("Enter element");
    for(i=0;i<size;i++){
        scanf("%d",&ar[i]);
    }
    for(i=0;i<size;i++){
        printf("%d\t",ar[i]);
    }
    printf("\n");
    printf("Sorted array is\n");
    quick_sort(ar,0,size-1);
    for(i=0;i<size;i++){
        printf("%d\t",ar[i]);
    }
    return 0;
}

time complexcity-best case-O(n*logn)
                 average case-O(n*logn)
                 worst case-o(n2)

###################################################################################

2.Write a program to sort a given array using merge sort. Derive worst case and average case time complexity of merge sort.
->
#include<Stdio.h>
#include<stdlib.h>
void merge(int ar[],int low,int up, int mid){
    int i=low;
    int j=mid+1;
    int k=low;
    int c[100];
    while(i<=mid && j<=up){
        if(ar[i]<ar[j]){
            c[k]=ar[i];
            i+=1;
            k+=1;
        }
        else if(ar[i]>=ar[j]){
            c[k]=ar[j];
            j+=1;
            k+=1;
        }
    }
    while(i<=mid){
        c[k]=ar[i];
        i+=1;
        k+=1;
    }
    while(j<=up){
        c[k]=ar[j];
        j+=1;
        k+=1;
    }
    for(i=low;i<=up;i++){
        ar[i]=c[i];
    }
}
void merge_sort(int ar[],int low,int up){
    int mid;
    if(low<up){
        mid=(low+up)/2;
        merge_sort(ar,low,mid);
        merge_sort(ar,mid+1,up);
        merge(ar,low,up,mid);
    }
}
void main(){
    int size,ar[100],i;
    printf("Enter size of the array");
    scanf("%d",&size);
    printf("Enter element");
    for(i=0;i<size;i++){
        scanf("%d",&ar[i]);
    }
    for(i=0;i<size;i++){
        printf("%d\t",ar[i]);
    }
    printf("\n");
    printf("Sorted array is\n");
    merge_sort(ar,0,size-1);
    for(i=0;i<size;i++){
        printf("%d\t",ar[i]);
    }
}

time complexcity-worst case-O(n*logn)
                 average case-O(n*logn)

###############################################################################

3.Write a C program to implement travelling salesman problem using dynamic programming consider there are 4 cities. The cost matrix is given here
->
#include<stdio.h>
#include<stdlib.h>
int visit[10],cost=0;
int find_path(int g[][100],int rc,int c){
    int nc=999,kmin,min=999;
    for(int i=0;i<rc;i++){
        if(g[c][i]!=0 && visit[i]==0){
            if(g[c][i]<min){
                min=g[i][0]+g[c][i];
                kmin=g[c][i];
                nc=i;
            }
        }
    }
    if(min!=999){
        cost+=kmin;
    }
    return nc;
}
void t_s_p(int g[][100],int rc,int j){
    visit[j]=1;
    printf("%d->",j+1);
    int visited=find_path(g,rc,j);
    if(visited==999){
        visited=0;
        printf("%d",visited+1);
        cost+=g[j][visited];
        return ;
    }
    t_s_p(g,rc,visited);
}
void main(){
    int rc,tsp[100][100];
    printf("Enter no of row and column");
    scanf("%d",&rc);
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("Enter cost of %d to %d ",i+1,j+1);
            scanf("%d",&tsp[i][j]);
        }
        visit[i]=0;
    }
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("%d\t",tsp[i][j]);
        }
        printf("\n");
    }
    printf("path\t");
    t_s_p(tsp,rc,0);
    printf("\nMinimum cost\n");
    printf("%d\n",cost);   
}

###############################################################################

4.Write a program to implement matrix multiplication using
     a.Brute force approach
     b.Divide and conquer approach
     c.Find the complexity in both cases
->
#include <stdio.h>
#include <stdlib.h>
void matrix_mul()
{
    int i, j, k;
    int ar1[10][10], ar2[10][10], c[10][10], r1, r2, c1, c2;
    printf("enter no of row of matrix1");
    scanf("%d", &r1);
    printf("enter no of column of matrix1");
    scanf("%d", &c1);
    for (i = 0; i < r1; ++i)
    {
        for (j = 0; j < c1; j++)
        {
            printf("ar1[%d][%d]", i + 1, j + 1);
            scanf("%d", &ar1[i][j]);
        }
    }
    for (i = 0; i < r1; i++)
    {
        for (j = 0; j < c1; j++)
        {
            printf("%d\t", ar1[i][j]);
        }
        printf("\n");
    }
    printf("enter no of row of matrix2");
    scanf("%d", &r2);
    printf("enter no of column of matrix2");
    scanf("%d", &c2);
    for (i = 0; i < r2; i++)
    {
        for (j = 0; j < c2; j++)
        {
            printf("ar2[%d][%d]", i + 1, j + 1);
            scanf("%d", &ar2[i][j]);
        }
    }
    for (i = 0; i < r2; i++)
    {
        for (j = 0; j < c2; j++)
        {
            printf("%d\t", ar2[i][j]);
        }
        printf("\n");
    }
    if (c1 != r2)
    {
        printf("Matrix multiplication is not possible");
    }
    else
    {
        // for (i = 0; i < r1; ++i)
        // {
        //     for (j = 0; j < c2; ++j)
        //     {
        //         c[i][j]=0;
        //     }
        // }
        int sum=0;
        for (i = 0; i < r1; ++i)
        {
            for (j = 0; j < c2; ++j)
            {
                sum=0;
                for (k = 0; k < c1; ++k)
                {
                    sum += ar1[i][k] * ar2[k][j];
                }
                c[i][j] = sum;
            }
        }
        for (i = 0; i < r1; i++)
        {
            for (j = 0; j < c2; j++)
            {
                printf("%d\t",c[i][j]);
            }
            printf("\n");
        }
    }
}
    void main()
    {
        matrix_mul();
    }
Brute force approach time complexcity-o(n^3)
Divide and conquer approach time complexcity-o(n^log7)

###############################################################################

5.A list of jobs with job id, deadline and profit. And the number of jobs 
->
#include<stdio.h>
#include<stdlib.h>
struct list{
    char name[10];
    int profit;
    int deadline;
};
int min_value(int x,int y){
    if(x<y){
        return x;
    }
    else{
        return y;
    }
}
void Job_sequence(int size,struct list *ar){
    int i,j,dmax=0,slot[100],filledslot=0,dmin=0,total_profit=0;
    struct list temp;
    for(i=0;i<size-1;i++){
        for(j=0;j<size-i-1;j++){
            if(ar[j].profit<ar[j+1].profit){
                temp=ar[j];
                ar[j]=ar[j+1];
                ar[j+1]=temp;
            }
        }
    }
    for(i=0;i<size;i++){
        if(ar[i].deadline>dmax){
            dmax=ar[i].deadline;
        }
    }
    for(i=1;i<=dmax;i++){
        slot[i]=-1;
    }
    for(i=0;i<size;i++){
        dmin=min_value(dmax,ar[i].deadline);
        while (dmin>=1)
        {
            if(slot[dmin]==-1){
                slot[dmin]=i;
                filledslot++;
                break;
            }
            dmin--;
        }
        if(filledslot==dmax){
            break;
        }
    }
    printf("Best order of job is to\n");
    for(i=1;i<=dmax;i++){
        printf("%s\t",ar[slot[i]].name);
    }
    printf("\n");
    for(i=1;i<=dmax;i++){
        total_profit+=ar[slot[i]].profit;
    }
    printf("Total profit = %d",total_profit);
}
void main(){
    int size,i;
    struct list ar[100];
    printf("Enter size of the structure ");
    scanf("%d",&size);
    for(i=0;i<size;i++){
        printf("Enter:-\n");
        printf("\tjob name: ");
        scanf("%s",&ar[i].name);
        printf("\tdeadline: ");
        scanf("%d",&ar[i].deadline);
        printf("\tprofit: ");
        scanf("%d",&ar[i].profit);
    }
    Job_sequence(size,ar);
}

#############################################################################

6.Write a C program to implement n-queens problem using backtracking.
Enter the number of queen:4
->
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
int ch_board[4],sol;
void print_board(int n) {
  int i, j;
  printf("\n\nSolution %d:\n\n", ++sol);

  for (i = 1; i <= n; i++)
    printf("\t%d", i);

  for (i = 1; i <= n; i++) {
    printf("\n\n%d", i);
    for (j = 1; j <= n; ++j) {
      if (ch_board[i] == j)
        printf("\tQ");
      else
        printf("\t0");
    }
  }
}
int isplace(int row,int col){
    for(int i=1;i<=row-1;i++)
    {
        if(ch_board[i]==col){
            return 0;
        }
        else if((abs(ch_board[i]-col)) == (abs(i-row))){
            return 0;
        }
    }
    return 1;
}
void N_queen(int row,int n){
    for(int col=1;col<=n;col++){
        if(isplace(row,col)){
            ch_board[row]=col;
            if(row==n){
                print_board(n);
            }
            else{
                N_queen(row+1,n);
            }
        }
    }
}
void main(){
    N_queen(1,4);
}

###################################################################################

7.Write a program to implement binary search for an array of size n. The input is given by the user. Write a recursive function called binsearch() that will return the item if the item is present in the array else it return 0. The user cannot give 0 as input. Draw the recurrence tree for Binary search algorithm. Derive the complexity of binary search using recurrence relation.  
->
#include <stdio.h>
#include <stdlib.h>
void binary_search(int ar[], int n, int low, int up, int item)
{
    int flag = 0, mid;
    if (low > up)
    {
        printf("0\n");
    }
    else
    {
        mid = (low + up) / 2;
        if (ar[mid] == item)
        {
            printf("%d\n", item);
        }
        else if (ar[mid] < item)
        {
            binary_search(ar, n, mid + 1, up, item);
        }
        else if (ar[mid] > item)
        {
            binary_search(ar, n, low, mid - 1, item);
        }
    }
}
void main()
{
    int ar[100], i, n, item, c;
    printf("Enter size of the array");
    scanf("%d", &n);
    printf("Enter Element in the array");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &ar[i]);
    }
    for (i = 0; i < n; i++)
    {
        printf("%d\t", ar[i]);
    }
    while (1)
    {
        printf("Enter 1:for Binary search Enter 2:for Exit");
        scanf("%d", &c);
        switch (c)
        {
        case 1:
            printf("Enter item to be searched");
            scanf("%d", &item);
            binary_search(ar, n, 0, n - 1, item);
            break;
        case 2:
            printf("Programm end");
            exit(0);
        default:
            printf("Wrong choice");
            break;
        }
    }
}

T.C-o(log(n))

#####################################################################################################

8.Write a C program to implement fractional knapsack.
->
#include<stdio.h>
#include<stdlib.h>
struct list{
    char name[10];
    int wieght;
    int profit;
    float ratio;
};
void Frac_knapsack(int knapsack,int size,struct list *ar){
    int i,j;
    struct list temp;
    for(i=0;i<size-1;i++){
        for(j=0;j<size-i-1;j++){
            if(ar[j].ratio<ar[j+1].ratio){
                temp=ar[j];
                ar[j]=ar[j+1];
                ar[j+1]=temp;
            }
        }
    }
    float total_profit=0;
    for(i=0;i<size;i++){
        if(knapsack==0){
            break;
        }
        if(ar[i].wieght<=knapsack){
            total_profit+=ar[i].profit;
            knapsack-=ar[i].wieght;
        }
        else{
            total_profit+=(float)ar[i].profit*(float)knapsack/(float)ar[i].wieght;
            break;
        }
    }
   printf("Total profit is %f",total_profit);
}
void main(){
    int size,knapsack,i;
    struct list ar[10];
    printf("Enter no of items");
    scanf("%d",&size);
    printf("Enter capacity of knapsack");
    scanf("%d",&knapsack);
    for(i=0;i<size;i++){
        printf("Enter items ");
        scanf("%s",&ar[i].name);
        printf("Enter profit");
        scanf("%d",&ar[i].profit);
        printf("Enter weight ");
        scanf("%d",&ar[i].wieght);
        ar[i].ratio=(float)ar[i].profit/(float)ar[i].wieght;
    }
    Frac_knapsack(knapsack,size,ar);
}

#########################################################################################################

9.Write a C program to compute All pair shortest path using Floydwarshell algorithm
->
#include<stdio.h>
#include<stdlib.h>
void all_pair(int g[][100],int row){
    int i,j,k;
    for(i=0;i<row;i++){
        for(j=0;j<row;j++){
            for(k=0;k<row;k++){
                if(g[i][j]>g[i][k]+g[k][j]){
                    g[i][j]=g[i][k]+g[k][j];
                }
            }
        }
    }
}
void main(){
    int ar[100][100],rc,i,j;
    printf("Enter no of row and no of Column");
    scanf("%d",&rc);
    for(i=0;i<rc;i++){
        for(j=0;j<rc;j++){
            if(i==j){
                ar[i][j]=0;
            }
            else{
                printf("Enter cost %d to %d ",i+1,j+1);
                scanf("%d",&ar[i][j]);
            }
        }
    }
    for(i=0;i<rc;i++){
        for(j=0;j<rc;j++){
            printf("%d\t",ar[i][j]);
        }
        printf("\n");
    }
    printf("Shortest Path\n");
    all_pair(ar,rc);
    for(i=0;i<rc;i++){
        for(j=0;j<rc;j++){
            printf("%d\t",ar[i][j]);
        }
        printf("\n");
    }
}

####################################################################################

10.Write a C program to implement Prim’s  algorithm.
->
#include <stdio.h>
#include <stdlib.h>
int a,b,u,v,ne=1;
int visited[10]={0},min,min_cost=0;
void prims(int g[][100],int n){
    
    while (ne<n)
    {
        min=999;
            for(int i=0;i<n;i++)
		    for(int j=0;j<n;j++)
		        if(g[i][j]< min)
                    if(visited[i]!=0)
                    {
                        min=g[i][j];
                        a=u=i;
                        b=v=j;
                    }
                if(visited[u]==0 || visited[v]==0)
                {
                    printf("(%d-%d), ",a+1,b+1);
                    ne++;
                    min_cost+=min;
                    visited[b]=1;
                }
                g[a][b]=g[b][a]=999;
            }
	printf("\n Minimun cost=%d",min_cost);
}
void main(){
    int rc,matrix[100][100];
    printf("Enter no of row & column");
    scanf("%d",&rc);
    printf("Enter cost matrix\n");
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("ar[%d][%d]=",i+1,j+1);
            scanf("%d",&matrix[i][j]);
        }
    }
    printf("Your Entered cost matrix is\n");
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("%d\t",matrix[i][j]);
        }
        printf("\n");
    }
 
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            if(matrix[i][j]==0){
                matrix[i][j]=999;
            }
        }
    }
    visited[1]=1;
    printf("\n Minimum spanning tree has edges \n");
    prims(matrix,rc);
}

####################################################################################

11.Write a C program to implement Kruskal algo to find minimum cost spanning tree of a graph.
->
#include <stdio.h>
#include <stdlib.h>
#define MAX 100

int adj[MAX][MAX], parent[MAX], rank[MAX], n;

void makeSet() {
    int i;
    for(i=0; i<n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

int find(int x) {
    if(parent[x] != x) {
        parent[x] = find(parent[x]);
    }
    return parent[x];
}

void unionSet(int x, int y) {
    int xRoot = find(x);
    int yRoot = find(y);

    if(xRoot == yRoot) {
        return;
    }

    if(rank[xRoot] < rank[yRoot]) {
        parent[xRoot] = yRoot;
    } else if(rank[xRoot] > rank[yRoot]) {
        parent[yRoot] = xRoot;
    } else {
        parent[yRoot] = xRoot;
        rank[xRoot]++;
    }
}

void kruskal() {
    int i, j, k, u, v, min, cost = 0;
    int edgeCount = 0;
    int edge[2][MAX];
    for(i=0; i<n; i++) {
        for(j=i+1; j<n; j++) {
            if(adj[i][j] != 0) {
                edge[0][edgeCount] = i;
                edge[1][edgeCount] = j;
                edgeCount++;
            }
        }
    }
    for(i=0; i<edgeCount-1; i++) {
        min = i;
        for(j=i+1; j<edgeCount; j++) {
            if(adj[edge[0][j]][edge[1][j]] < adj[edge[0][min]][edge[1][min]]) {
                min = j;
            }
        }
        if(min != i) {
            int temp = edge[0][i];
            edge[0][i] = edge[0][min];
            edge[0][min] = temp;

            temp = edge[1][i];
            edge[1][i] = edge[1][min];
            edge[1][min] = temp;
        }
    }
    int treeEdges = 0;
    i = 0;
    while(treeEdges < n-1 && i < edgeCount) {
        u = edge[0][i];
        v = edge[1][i];
        i++;
        
        if(find(u) != find(v)) {
            unionSet(u, v);
            printf("(%d, %d)\n", u+1, v+1);
            cost += adj[u][v];
            treeEdges++;
        }
    }
    printf("Minimum cost: %d\n", cost);
}

int main() {
    int i, j;
    printf("Enter number of nodes: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for(i=0; i<n; i++) {
        for(j=0; j<n; j++) {
            printf("ad[%d][%d]= ",i+1,j+1);
            scanf("%d", &adj[i][j]);
        }
    }
    printf("Your Entered adjacency matrix is\n");
     for(i=0; i<n; i++) {
        for(j=0; j<n; j++) {
            printf("%d\t",adj[i][j]);
        }
        printf("\n");
    }
    makeSet();
    printf("The minimum spanning tree has edges:\n");
    kruskal();
    return 0;
}

###################################################################################
12.Write a C program to implement DFS 
->
#include <stdio.h>
#include <stdbool.h>
#define MAX_NODES 4
int graph[MAX_NODES][MAX_NODES], n;
bool visited[MAX_NODES];
void DFS(int node) {
    visited[node] = true;
    printf("%d ", node + 1); 
    for (int i = 0; i < MAX_NODES; i++) {
        if (graph[node][i] == 1 && !visited[i]) {
            DFS(i);
        }
    }
}
int main() {
    int source = 0;
    int goal = 3;

    printf("Enter number of nodes: ");
      scanf("%d", &n);
 
      printf("Enter adjacency matrix:\n");
      for(int i=0; i<n; i++) {
          for(int j=0; j<n; j++) {
            printf("ar[%d][%d]= ",i+1,j+1);
            scanf("%d", &graph[i][j]);
            }
      }
       printf("your Entered adjacency matrix:\n");
       for(int i=0; i<n; i++) {
          for(int j=0; j<n; j++) {
            printf("%d\t",graph[i][j]);
          }
          printf("\n");
   }
    printf("\nDFS path from %d to %d: ", source + 1, goal + 1);
    DFS(source);
    printf("\n");
   
    if (visited[goal]) {
        printf("Goal node %d is reachable from the source node 1.\n", goal + 1);
    } else {
        printf("Goal node %d is not reachable from the source node 1.\n", goal + 1);
    }
    return 0;
}

####################################################################################

13.Write a C program to implement BFS for a given graph .
->
#include <stdio.h>
#define MAX_NODES 4
int graph[MAX_NODES][MAX_NODES], visited[MAX_NODES] = {0}, n;
void bfs(int sourceNode) {
  int queue[MAX_NODES];
  int front = 0;
  int rear = 0;
  visited[sourceNode - 1] = 1;
  queue[rear++] = sourceNode;
  while (front < rear) {
    int currentNode = queue[front++];
    printf("%d ", currentNode);
    for (int i = 0; i < MAX_NODES; i++) {
      if (graph[currentNode - 1][i] == 1 && visited[i] == 0) {
        visited[i] = 1;
        queue[rear++] = i + 1;
      }
    }
  }
}
int main() {
  int sourceNode = 1;
  int goalNode = 4;
  printf("Enter number of nodes: ");
  scanf("%d",&n);
  printf("Enter adjacency matrix: \n");
  for(int i=0; i<n; i++) {
    for(int j = 0; j<n; j++) {
        printf("ad[%d][%d]= ",i+1,j+1);
        scanf("%d",&graph[i][j]);
    }
  }
  printf("Your enterd adjacency matrix is: \n");
  for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
        printf("%d\t",graph[i][j]);
    }
    printf("\n");
  }
  printf("BFS traversal from node %d to node %d: ", sourceNode, goalNode);
  bfs(sourceNode);
  printf("\n");

  return 0;
}

####################################################################################3

4.Write a program to implement matrix multiplication using
      a.Brute force approach
->
#include<stdio.h>
#include<stdlib.h>
void matrix_mul(int ar1[][10],int ar2[][10],int r,int c,int r1,int c1){
    int C[10][10];
    for(int i=0;i<r;i++){
        for(int j=0;j<c1;j++){
            C[i][j]=0; 
            for(int k=0;k<c;k++){
                C[i][j]+=ar1[i][k]*ar2[k][j];
            }
        }
    }
    printf("Result of matrix multiplication is:-\n");
    for(int i=0;i<r;i++){
        for(int j=0;j<c1;j++){
            printf("%d\t",C[i][j]);
        }
        printf("\n");
    }
}
void main(){
    int r,c,r1,c1,m[10][10],m1[10][10];
    printf("Enter no of row  and column for matrix1");
    scanf("%d %d",&r,&c);
    printf("Enter no of row  and column for matrix2");
    scanf("%d %d",&r1,&c1);
    printf("Enter element in matrix1\n");
    for(int i=0;i<r;i++){
        for(int j=0;j<c;j++){
            printf("m1[%d][%d]= ",i+1,j+1);
            scanf("%d",&m[i][j]);
        }
    }
    printf("Enter element in matrix2\n");
    for(int i=0;i<r1;i++){
        for(int j=0;j<c1;j++){
            printf("m2[%d][%d]= ",i+1,j+1);
            scanf("%d",&m1[i][j]);
        }
    }
    printf("Matrix1:-\n");
    for(int i=0;i<r;i++){
        for(int j=0;j<c;j++){
            printf("%d\t",m[i][j]);
        }
        printf("\n");
    }
    printf("Matrix2:-\n");
    for(int i=0;i<r1;i++){
        for(int j=0;j<c1;j++){
            printf("%d\t",m1[i][j]);
        }
        printf("\n");
    }
    matrix_mul(m,m1,r,c,r1,c1);
}

####################################################################################

4.Write a program to implement matrix multiplication using
        a.Divide and conquer approach
->
#include<stdio.h>
#include<stdlib.h>
void strassens_matrix(int ar1[][10],int ar2[][10],int rc){
    int C[rc][rc],m1,m2,m3,m4,m5,m6,m7;
    m1=(ar1[0][0]+ar1[1][1])*(ar2[0][0]+ar2[1][1]);
    m2=(ar1[1][0]+ar1[1][1])*ar2[0][0];
    m3=(ar1[0][0])*(ar2[0][1]-ar2[1][1]);
    m4=(ar1[1][1])*(ar2[1][0]-ar2[0][0]);
    m5=(ar1[0][0]+ar1[0][1])*ar2[1][1];
    m6=(ar1[1][0]-ar1[0][0])*(ar2[0][0]+ar2[0][1]);
    m7=(ar1[0][1]-ar1[1][1])*(ar2[1][0]+ar2[1][1]);
    C[0][0]=m1+m4-m5+m7;
    C[0][1]=m3+m5;
    C[1][0]=m2+m4;
    C[1][1]=m1-m2+m3+m6;
    printf("After strassens matrix multiplication result will be:-\n");
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("%d\t",C[i][j]);
        }
        printf("\n");
    }
}
void main(){
    int rc,m[10][10],m1[10][10];
    printf("Enter no of row and column");
    scanf("%d",&rc);
    printf("Enter element in matrix1:-\n");
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("m1[%d][%d]=",i+1,j+1);
            scanf("%d",&m[i][j]);
        }
    }
    printf("Enter element in matrix2:-\n");
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("m2[%d][%d]=",i+1,j+1);
            scanf("%d",&m1[i][j]);
        }
    }
    printf("Matrix1:-\n");
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("%d\t",m[i][j]);
        }
        printf("\n");
    }
    printf("Matrix2:-\n");
    for(int i=0;i<rc;i++){
        for(int j=0;j<rc;j++){
            printf("%d\t",m1[i][j]);
        }
        printf("\n");
    }
    strassens_matrix(m,m1,rc);
}



#######################################################################################